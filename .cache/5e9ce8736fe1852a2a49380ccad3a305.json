{"dependencies":[{"name":"moment","loc":{"line":3,"column":23}},{"name":"echarts/lib/echarts","loc":{"line":6,"column":24}},{"name":"echarts/lib/chart/line","loc":{"line":9,"column":8}},{"name":"./services/coinbase","loc":{"line":11,"column":25}}],"generated":{"js":"\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/* eslint import/no-unassigned-import: \"off\" */\n\nvar moment = require('moment');\n// Const v = require('voca')\n\nvar echarts = require('echarts/lib/echarts');\n\n// Include bar chart\nrequire('echarts/lib/chart/line');\n\nvar coinbase = require('./services/coinbase');\n\nvar $ = function $(s) {\n  return document.querySelector(s);\n};\n\nvar initHTMLFields = function initHTMLFields(base, currency, basesRef, currenciesRef) {\n  var currencies = $('select[property=\\'currency\\']');\n  var bases = $('select[property=\\'base\\']');\n\n  basesRef.forEach(function (elt) {\n    var opt1 = document.createElement('option');\n    opt1.text = elt.text;\n    opt1.value = elt.value;\n    bases.add(opt1);\n  });\n\n  currenciesRef.forEach(function (elt) {\n    var opt2 = document.createElement('option');\n    opt2.text = elt.text;\n    opt2.value = elt.value;\n    currencies.add(opt2);\n  });\n\n  currencies.value = currency;\n  bases.value = base;\n};\n\nvar drawChart = function drawChart(prices) {\n  var chart = echarts.init($('#graphPerf2d'));\n\n  // ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3']\n  var option = {\n    xAxis: [{\n      data: prices.map(function (x) {\n        return x.time;\n      }),\n      show: false\n    }],\n    yAxis: [{\n      type: 'value',\n      min: 'dataMin',\n      max: 'dataMax',\n      show: false\n    }],\n    series: [{\n      name: 'D-1',\n      type: 'line',\n      data: prices.map(function (x) {\n        return x.price;\n      }),\n      markLine: {\n        data: [{ type: 'average', name: 'avg price' }]\n      }\n    }, {\n      name: 'D-2',\n      type: 'line',\n      data: prices.slice(0, 48).map(function (x) {\n        return x.price;\n      }),\n      markLine: {\n        data: [{ type: 'average', name: 'avg price' }]\n      }\n    }]\n  };\n\n  chart.setOption(option);\n};\n\nvar checkCoinbase = function checkCoinbase() {\n  var selCurrency = $('select[property=\\'currency\\']').value;\n  var selBase = $('select[property=\\'base\\']').value;\n\n  console.log('checking coinbase for fresh data');\n  coinbase.spot(selCurrency).then(function (res) {\n    var price = parseFloat(res.find(function (elt) {\n      return elt.base === selBase;\n    }).amount, 'us');\n    $('input[property=\\'spot\\']').value = price;\n\n    coinbase.historic('year').then(function (res) {\n      var prices52w = res.prices.map(function (x) {\n        return parseFloat(x.price, 'us');\n      });\n      var min = prices52w.reduce(function (a, b) {\n        return Math.min(a, b);\n      });\n      var max = prices52w.reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      $('input[property=\\'min52w\\']').value = min;\n      $('input[property=\\'max52w\\']').value = max;\n      $('meter[property=\\'range52w\\']').value = price;\n    });\n\n    $('input[property=\\'checked_time\\']').value = moment().format('H:mm:ss');\n    $('input[property=\\'checked_date\\']').value = moment().format('MM/DD/YYYY');\n  });\n\n  coinbase.historic('week').then(function (res) {\n    var prices2d = res.prices.slice(0, 96);\n    var prices1d = prices2d.slice(0, 48).map(function (x) {\n      return parseFloat(x.price, 'us');\n    });\n    var close1d = prices1d[0];\n\n    var _prices1d$slice = prices1d.slice(-1),\n        _prices1d$slice2 = _slicedToArray(_prices1d$slice, 1),\n        open1d = _prices1d$slice2[0];\n\n    $('input[property=\\'close1d\\']').value = close1d;\n    $('input[property=\\'open1d\\']').value = open1d;\n    drawChart(prices2d);\n  });\n};\n\ndocument.addEventListener('mv-change', function (evt) {\n  console.log(evt.action, evt.property, evt.value);\n\n  if (evt.action === 'propertychange') {\n    if (evt.property === 'base') {\n      checkCoinbase();\n    }\n\n    if (evt.property === 'currency') {\n      checkCoinbase();\n    }\n  }\n});\n\ninitHTMLFields('BTC', 'EUR', [{ text: 'BITCOIN', value: 'BTC' }, { text: 'ETHEREUM', value: 'ETH' }, { text: 'LITECOIN', value: 'LTC' }], [{ text: 'EURO', value: 'EUR' }, { text: 'US DOLLAR', value: 'USD' }]);\n\ncheckCoinbase();"},"hash":"e4292e756cf41092c983b40e29043a81"}